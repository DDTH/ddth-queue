package com.github.ddth.queue.impl;

import com.github.ddth.commons.serialization.FstSerDeser;
import com.github.ddth.commons.serialization.ISerDeser;
import com.github.ddth.queue.IQueue;
import com.github.ddth.queue.IQueueMessage;
import com.github.ddth.queue.IQueueMessageFactory;
import com.github.ddth.queue.utils.QueueException;

import java.util.Date;

/**
 * Abstract queue implementation.
 *
 * @author Thanh Nguyen <btnguyen2k@gmail.com>
 * @since 0.5.0
 */
public abstract class AbstractQueue<ID, DATA> implements IQueue<ID, DATA>, AutoCloseable {
    protected enum PutToQueueCase {
        NEW(0), REQUEUE(1), REQUEUE_SILENT(2);

        private final int value;

        PutToQueueCase(int value) {
            this.value = value;
        }

        public int value() {
            return value;
        }
    }

    private String queueName;
    private IQueueMessageFactory<ID, DATA> messageFactory;
    private ISerDeser serDeser;

    /**
     * Queue's name.
     *
     * @return
     * @since 0.6.0
     */
    public String getQueueName() {
        return queueName;
    }

    /**
     * Queue's name.
     *
     * @param queueName
     * @return
     * @since 0.6.0
     */
    public AbstractQueue<ID, DATA> setQueueName(String queueName) {
        this.queueName = queueName;
        return this;
    }

    /**
     * Factory to create queue messages.
     *
     * @return
     * @since 0.7.0
     */
    public IQueueMessageFactory<ID, DATA> getMessageFactory() {
        return messageFactory;
    }

    /**
     * Factory to create queue messages.
     *
     * @param messageFactory
     * @return
     * @since 0.7.0
     */
    public AbstractQueue<ID, DATA> setMessageFactory(IQueueMessageFactory<ID, DATA> messageFactory) {
        this.messageFactory = messageFactory;
        return this;
    }

    /**
     * Message serializer/deserializer.
     *
     * @return
     * @since 1.0.0
     */
    public ISerDeser getSerDeser() {
        return serDeser;
    }

    /**
     * Message serializer/deserializer.
     *
     * @param serDeser
     * @return
     * @since 1.0.0
     */
    public AbstractQueue<ID, DATA> setSerDeser(ISerDeser serDeser) {
        this.serDeser = serDeser;
        return this;
    }

    /**
     * Initializing method.
     *
     * @return
     * @throws Exception
     */
    public AbstractQueue<ID, DATA> init() throws Exception {
        if (serDeser == null) {
            serDeser = new FstSerDeser();
        }
        return this;
    }

    /**
     * Destroy method.
     */
    public void destroy() {
        //EMPTY
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void close() {
        destroy();
    }

    /**
     * {@inheritDoc}
     *
     * @since 0.6.0
     */
    @Override
    public IQueueMessage<ID, DATA> createMessage() {
        return messageFactory.createMessage();
    }

    /**
     * {@inheritDoc}
     *
     * @since 0.6.0
     */
    @Override
    public IQueueMessage<ID, DATA> createMessage(DATA content) {
        return messageFactory.createMessage(content);
    }

    /**
     * {@inheritDoc}
     *
     * @since 0.6.0
     */
    @Override
    public IQueueMessage<ID, DATA> createMessage(ID id, DATA content) {
        return messageFactory.createMessage(id, content);
    }

    /**
     * Serialize a queue message to bytes.
     *
     * @param queueMsg
     * @return
     * @since 0.7.0
     */
    protected byte[] serialize(IQueueMessage<ID, DATA> queueMsg) {
        return queueMsg != null ? serDeser.toBytes(queueMsg) : null;
    }

    /**
     * Deserialize a queue message from bytes (was generated by
     * {@link #serialize(IQueueMessage)}.
     *
     * @param data
     * @return
     * @since 0.7.0
     */
    @SuppressWarnings("unchecked")
    protected IQueueMessage<ID, DATA> deserialize(byte[] data) {
        return deserialize(data, IQueueMessage.class);
    }

    /**
     * Deserialize a queue message from bytes (was generated by
     * {@link #serialize(IQueueMessage)}.
     *
     * @param data
     * @param clazz
     * @return
     * @since 0.7.0
     */
    protected <T extends IQueueMessage<ID, DATA>> T deserialize(byte[] data, Class<T> clazz) {
        return data != null ? serDeser.fromBytes(data, clazz) : null;
    }

    /**
     * Put a message to the queue storage.
     *
     * <p>Sub-class implements this method.</p>
     *
     * @param msg
     * @param queueCase
     * @return
     * @throws QueueException.QueueIsFull
     * @since 1.0.0
     */
    protected abstract boolean doPutToQueue(IQueueMessage<ID, DATA> msg, PutToQueueCase queueCase)
            throws QueueException.QueueIsFull;

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean queue(IQueueMessage<ID, DATA> _msg) {
        Date now = new Date();
        IQueueMessage<ID, DATA> msg = _msg.clone().setNumRequeues(0).setQueueTimestamp(now);
        msg.setTimestamp(now);
        return doPutToQueue(msg, PutToQueueCase.NEW);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean requeue(IQueueMessage<ID, DATA> _msg) {
        IQueueMessage<ID, DATA> msg = _msg.clone().incNumRequeues().setQueueTimestamp(new Date());
        return doPutToQueue(msg, PutToQueueCase.REQUEUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean requeueSilent(IQueueMessage<ID, DATA> _msg) {
        IQueueMessage<ID, DATA> msg = _msg.clone();
        return doPutToQueue(msg, PutToQueueCase.REQUEUE_SILENT);
    }
}
